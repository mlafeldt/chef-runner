#!/bin/sh
#/ Usage: chef-runner [options] [--] [<recipe>...]
#/
#/     -h, --help                   Show help text
#/     -H, --host <name>            Set hostname for direct SSH access
#/     -M, --machine <name>         Set name of Vagrant virtual machine
#/
#/ Options that will be passed to Chef Solo:
#/
#/     -F, --format <format>        Set output format (null, doc, minimal, min)
#/                                  default: null
#/     -l, --log_level <level>      Set log level (debug, info, warn, error, fatal)
#/                                  default: info
#/     -j, --json-attributes <file> Load attributes from a JSON file
#
# Written by Mathias Lafeldt <mathias.lafeldt@gmail.com>
# Licensed under the Apache License 2.0.
# Project site: https://github.com/mlafeldt/chef-runner
#

set -e

abort() { echo >&2 "$*"; exit 1; }

file_must_exist() {
    test -f "$1" || abort "error: $1 not found"
}

# Get cookbook name from metadata.rb.
cookbook_name() {
    file="metadata.rb"
    file_must_exist "$file"
    head -n1 "$file" | sed "s/^name/echo/" | sh
}

# Get path to cookbooks from Vagrantfile; use "vendor/cookbooks" if not found.
cookbook_path() {
    file="Vagrantfile"
    file_must_exist "$file"
    path=$(grep cookbooks_path "$file" | head -n1 | cut -d= -f2 | tr -d "\"' ")
    echo ${path:-"vendor/cookbooks"}
}

# Install cookbook dependencies with Berkshelf. If the cookbooks are already in
# place, use lightning-fast rsync to update the current cookbook only.
install_cookbooks() {
    if ! test -d "$COOKBOOK_PATH/$COOKBOOK_NAME"; then
        if test -f Gemfile; then
            prefix="bundle exec"
        else
            prefix=
        fi
        $prefix berks install --path "$COOKBOOK_PATH"
    else
        rsync --archive --delete --exclude="$COOKBOOK_PATH" * \
            "$COOKBOOK_PATH/$COOKBOOK_NAME"
    fi
}

# Run commands via SSH.
run_ssh() {
    if test -n "$HOST"; then
        ssh "$HOST" "$@"
    else
        # Disable all Vagrant plugins
        export VAGRANT_NO_PLUGINS=1

        machine_name=${MACHINE:-default}
        config_file=".vagrant/machines/$machine_name/ssh_config"

        # Write SSH config once for machine
        if ! test -f "$config_file"; then
            config=$(vagrant ssh-config "$machine_name")
            echo "$config" > "$config_file"
        fi

        # Ask VirtualBox for current SSH port (forwarding)
        machine_id=$(cat ".vagrant/machines/$machine_name/virtualbox/id")
        ssh_port=$(VBoxManage showvminfo "$machine_id" --machinereadable | grep ^Forwarding | head -n1 | cut -d, -f4)

        ssh -F "$config_file" -p "$ssh_port" "$machine_name" "$@"
    fi
}

# Run Chef Solo inside a Vagrant VM. This code tries to be clever about
# provisioning, doing everything it can to integrate well with Vagrant.
# Provisioning should always work as long the VM is running and /vagrant is
# mounted, i.e. `vagrant up` is enough.
provision() {
    vagrant_path="/tmp/vagrant-chef-1"
    config_file="$vagrant_path/solo.rb"
    json_file="$vagrant_path/dna.json"
    cookbooks_path="/vagrant/$COOKBOOK_PATH"

    # Vagrant's Chef provisioner usually sets up both config and JSON files.
    # However, if the provisioner has not been executed yet, we have to put our
    # own minimal versions of those files in place before starting Chef.
    setup_dir="sudo mkdir -p $vagrant_path"
    setup_config="test -f $config_file || echo 'cookbook_path \"$cookbooks_path\"' | sudo tee $config_file >/dev/null"
    setup_json="test -f $json_file || echo '{}' | sudo tee $json_file >/dev/null"

    # If a custom JSON file was specified, change the path accordingly.
    if test -n "$JSON_FILE"; then
        json_file="/vagrant/$JSON_FILE"
    fi

    # Build up the Chef Solo command.
    run_chef_solo="sudo chef-solo --config=$config_file --json-attributes=$json_file \
                   --override-runlist=$RUNLIST --format=$FORMAT --log_level=$LOG_LEVEL"

    # Finally, run all commands via SSH.
    run_ssh "$setup_dir && $setup_config && $setup_json && $run_chef_solo"
}

main() {
    HOST=
    MACHINE=
    FORMAT="null"
    LOG_LEVEL="info"
    JSON_FILE=
    RUNLIST=

    while test "$#" -ne 0; do
        case "$1" in
        -h|--help)
            grep '^#/' <"$0" | cut -c4-; exit 0 ;;
        -H|--host)
            HOST=$2; shift 2 ;;
        -M|--machine)
            MACHINE=$2; shift 2 ;;
        -F|--format)
            FORMAT=$2; shift 2 ;;
        -l|--log_level)
            LOG_LEVEL=$2; shift 2 ;;
        -j|--json-attributes)
            JSON_FILE=$2
            file_must_exist "$JSON_FILE"
            shift 2 ;;
        --)
            shift; break ;;
        -|[!-]*)
            break ;;
        -*)
            abort "error: invalid option '$1'" ;;
        esac
    done

    if test -n "$HOST" && test -n "$MACHINE"; then
        abort "error: --host and --machine cannot be used together"
    fi

    COOKBOOK_NAME=$(cookbook_name)
    COOKBOOK_PATH=$(cookbook_path)

    if test $# -gt 0; then
        while test $# -gt 0; do
            case "$1" in
            *::*)
                recipe="$1" ;;
            recipes/*.rb|./recipes/*.rb)
                file_must_exist "$1"
                recipe="$COOKBOOK_NAME::$(basename $1 .rb)" ;;
            *)
                file_must_exist "recipes/${1}.rb"
                recipe="$COOKBOOK_NAME::$1" ;;
            esac
            shift

            if test -z "$RUNLIST"; then
                RUNLIST="$recipe"
            else
                RUNLIST="$RUNLIST,$recipe"
            fi
        done
    else
        file_must_exist "recipes/default.rb"
        RUNLIST="$COOKBOOK_NAME::default"
    fi

    install_cookbooks
    provision
}

main "$@"
